
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SynListSim</title>
    <script src="~/Libraries/plugins/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sockjs-client@1.3/dist/sockjs.min.js" type="text/javascript"></script>
    <script src="~/Scripts/centri/centrifuge.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/hmac-sha256.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64-min.js"></script>
    <script type="text/javascript">
        //var secret = "5a3d776a-69a5-49a7-975c-e20980c127ce";
        //var url = "ws://167.99.73.103:6969/connection/websocket";
        var secret = "92b402ab-2e5d-4db4-8d0f-b7d6dc4d35f7";
        var url = "ws://localhost:8000/connection/websocket";
        var header = {
            "alg": "HS256",
            "typ": "JWT"
        };


        var centrifuge = new Centrifuge(url, {
            transports: ["websocket", "xhr-streaming"]
        });
        var data = {
            "sub": "42"
        };
        var tokens = CreateToken(secret, header, data);
        centrifuge.setToken(tokens);
        centrifuge.connect();
        centrifuge.on('connect', function (context) {
            // now client connected to Centrifugo and authorized
            console.log("connect")
            console.log(context)

        });
        centrifuge.on('disconnect', function (context) {
            // do whatever you need in case of disconnect from server
            console.log("disconnect")
            console.log(context)
            centrifuge.setToken(tokens);
            centrifuge.connect();
        });
        var callbacks = {
            "publish": function (message) {
                // See below description of message format
                console.log("publish")
                console.log(message);
                UpdateStatusSim(message.data)
            },
            "join": function (message) {
                // See below description of join message format
                console.log("join")
                console.log(message);
            },
            "leave": function (message) {
                // See below description of leave message format
                console.log("leave")
                console.log(message);
            },
            "subscribe": function (context) {
                // See below description of subscribe callback context format
                console.log("subscribe")
                console.log(context);
            },
            "error": function (errContext) {
                // See below description of subscribe error callback context format
                console.log("error")
                console.log(errContext);
            },
            "unsubscribe": function (context) {
                // See below description of unsubscribe event callback context format
                console.log("unsubscribe")
                console.log(context);
            }
        }

        var subscription2 = centrifuge.subscribe("$admin", callbacks);

        function CreateToken(secret, header, data) {

            var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));
            var encodedHeader = base64url(stringifiedHeader);

            var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));
            var encodedData = base64url(stringifiedData);

            var signature = encodedHeader + "." + encodedData;
            signature = CryptoJS.HmacSHA256(signature, secret);
            signature = base64url(signature);
            return encodedHeader + "." + encodedData + "." + signature;
        }

        function base64url(source) {
            encodedSource = CryptoJS.enc.Base64.stringify(source);
            encodedSource = encodedSource.replace(/=+$/, '');
            encodedSource = encodedSource.replace(/\+/g, '-');
            encodedSource = encodedSource.replace(/\//g, '_');
            return encodedSource;
        }
        function UpdateStatusSim(data) {
            if (data != null) {
                $.ajax({
                url: '@Url.Action("UpdateStatusSim", "Centrifuge")',
                type: "post",
                data: { model: data },
                    success: function (result) {
                        console.log("Update Status Success!")
                        console.log(result)
                },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log("Update Status Error!")
                        console.log(errorThrown)
                }
            })
            }
        }
    </script>
</head>
<body>
    <h1>
        Đang đồng bộ Sim - Xin đừng tắt web
        (Synchronous list sim - Please do not turn off this web)
    </h1>
</body>
</html>

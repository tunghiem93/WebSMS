@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Payments = ViewBag.Payment as List<CMS_DTO.CMSPaymentMethod.CMS_PaymentMethodModels>;
}

@using CMS_Shared;
@model List<CMS_DTO.CMS_DepositPackageModel>
<!-- container -->
<div class="container">
    @Html.Partial("_breadcrumb", new Dictionary<string, string> { { "A", "Home" }, { "B", "DEPOSIT PACKAGE" } })
    <div class="page-header bottom-shadow">
        <h3>Deposit Package</h3>
        <p> Theme Deposit Package</p>
    </div><!-- Section Header /- -->
</div><!-- container /- -->
<div class="contact-form-details">
    <div class="container">
        <div class="">
            <div class="panel-heading" style="background:#2B3441 !important">Packages Plan</div>
            <div class="panel-body" style="padding-top: 0px !important;">
                <div class="row">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Package Name</th>
                                <th>SMS Package</th>
                                <th>Package price</th>
                                <th>Discount</th>
                                <th>Price</th>
                                <th>VND/SMS</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model == null || Model.Count <= 0)
                            {
                                <tr>
                                    <td colspan="7" style="text-align:center">No content</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.PackageName</td>
                                        <td>@string.Format("{0} {1}", item.PackageSMS.ToString("#,0"), "credits")</td>
                                        <td>@string.Format("{0} {1}", item.PackagePrice.ToString("#,0"), "VND")</td>
                                        <td>@string.Format("{0}", Math.Round(item.Discount, 2)) @Html.Raw("%")</td>
                                        <td>@string.Format("{0}", Math.Round(item.PriceUSD, 2)) @Html.Raw(" USD")</td>
                                        <td>@string.Format("{0}", (item.RateSMS - (item.RateSMS * item.Discount/100)).ToString("#,0"))</td>
                                        <td><a href="javascript:void(0)" class="btn-add-package add_@item.Id" onclick="AddDepositPackage(this,'@item.Id','@item.PackageName','@item.PriceDefault','@item.PackageSMS','@item.SMSPrice','@item.PackagePrice','@item.sPrice')">Add</a></td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="" style="display: block; margin: auto; width: 50%; text-align: center;">
            <div class="panel-heading" style="background:#2B3441 !important">Deposit Now</div>
            <div class="panel-body" style="padding-top: 0px !important;">
                <div class="row">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="text-right" width="40%">Choose your package</th>
                                <th class="text-left" width="20%">Price</th>
                                <th width="40%"></th>
                            </tr>
                        </thead>
                        <tbody id="tbodydeposite">
                        </tbody>
                        <tfoot class="hidden tfoot">
                            <tr>
                                <td colspan="2" style="text-align:right">Choose your payment</td>
                                <td>
                                    <select class="form-control" style="width:100%" id="txtPayment" onchange="ChangePayment(this)">
                                        <option value="-1">Choose payment</option>
                                        @if (Payments != null && Payments.Count > 0)
                                        {
                                            foreach (var itemP in Payments)
                                            {
                                                <option value="@itemP.Id">@itemP.PaymentName</option>
                                            }
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2"></td>
                                <td>
                                    <button class="btn btn-success" disabled id="paynow" onclick="PayNow();" style="text-align: center;">Next</button>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>        
    </div>
</div>
<div class="detail-view"></div>
<script type="text/javascript">
    var priceDefault = 0;
    var Deposits = []
    var DepositsPay = []
    function AddDepositPackage(that, PackageId, PackageName, PriceDefault, PackageSMS, SMSPrice, PackagePrice, sPrice) {
        debugger;
        priceDefault = PriceDefault;
        //$(that).addClass("hidden")
        $('.btn-add-package').addClass("hidden")
        $('.tfoot').removeClass('hidden')
        let PaymentId = $('#txtPayment').val()
        var isExits = Deposits.some((x) => x.PackageId === PackageId);
        if (!isExits) {
            Deposits.push({
                PackageId: PackageId,
                PackageName: PackageName,
                PayCoin: PriceDefault,
                Price: PriceDefault,
                PackageSMS: PackageSMS,
                SMSPrice: SMSPrice,
                PackagePrice: PackagePrice,
                PaymentMethodId: null,
                PaymentName: "USD",
                PaymentNameDefault: "USD",
                sPrice: sPrice,
                sTempPrice: sPrice,
                tempPrice: sPrice
            });
        }
        //GetPriceFromApi(PaymentId)
        var html = "";
        Deposits.forEach((x) => {
            let _PayCoin = parseInt(x.PayCoin) > 0 ? numeral(x.PayCoin).format('0,00000000') : x.PayCoin
            html += "<tr class='tr_price_default" + x.PackageId + "'>";
            html += "<td class=" + 'text-right' +">" + x.PackageName + "</td>";
            html += "<td class=" + 'text-left' +">" + parseFloat(x.Price).toFixed(2) + " " + x.PaymentName + "</td>";
            html += "<td> <a href='javascript:void(0)' class='remove_" + x.PackageId + "' onclick='removepackage(\"" + x.PackageId + "\")'> Remove </a> </td>";
            html += "</tr>";
        })
        DepositsPay = Deposits;
        $('[id=tbodydeposite]').html(html)
    }

    function removepackage(PackageId) {
        //$('.add_' + PackageId).removeClass('hidden')
        $('.btn-add-package').removeClass("hidden")
        $('.tr_price_default' + PackageId).remove()
        $('.tr_price_payment' + PackageId).remove()
        var item = Deposits.find((x) => x.PackageId == PackageId);
        Deposits.splice($.inArray(item, Deposits), 1);
        if (Deposits.length === 0) {
            $('.tfoot').addClass('hidden')
        }
    }

    function ChangePayment(that) {
        var paymentId = $(that).val()
        if (paymentId !== '-1') {
            $('#paynow').removeAttr("disabled")
        } else {
            $('#paynow').attr("disabled","disabled")
        }
        GetPriceFromApi(paymentId)
    }

    function RenderDepositNow() {
        var html = "";
        Deposits.forEach((x) => {
            let _PayCoin = parseInt(x.PayCoin) > 0 ? numeral(x.PayCoin).format('0,00000000') : x.PayCoin
            html += "<tr class='tr_price_default" + x.PackageId + "'>";
            html += "<td class=" + 'text-right' +">" + x.PackageName + "</td>";
            html += "<td class=" + 'text-left' +">" + parseFloat(x.Price).toFixed(2) + " " + x.PaymentNameDefault + "</td>";
            html += "<td> <a href='javascript:void(0)' class='remove_" + x.PackageId + "' onclick='removepackage(\"" + x.PackageId + "\")'> Remove </a> </td>";
            html += "</tr>";
        })
        DepositsPay.forEach((x) => {
            let _PayCoin = parseInt(x.PayCoin) > 0 ? numeral(x.PayCoin).format('0,00000000') : x.PayCoin
            html += "<tr class='tr_price_payment" + x.PackageId + "'>";
            html += "<td class=" + 'text-right' +">" + "You have to pay" + "</td>";
            html += "<td class=" + 'text-left' + ">" + parseFloat(x.tempPrice).toFixed(2) + " " + x.PaymentName + "</td>";
            html += "<td></td>"
            //html += "<td>" + x.tempPrice + " " + x.type + "</td>";
            //html += "<td> <a href='javascript:void(0)' class='remove_" + x.PackageId + "' onclick='removepackage(\"" + x.PackageId + "\")'> Remove </a> </td>";
            html += "</tr>";
        })
        $('[id=tbodydeposite]').html(html)
    }

    function PayNow() {
        $("#PayNow").attr('disabled', true);
        var paymentIdObj = '@Payments.Find((x) => x.ReferenceExchange == (int)Commons.ExchangeType.None).Id';
        var payCoin = 0;
        DepositsPay.forEach(x => {
            payCoin += x.PayCoin;
        });
        if (paymentIdObj == $('#txtPayment').val()) {
            location.href = "@Url.Action("Index", "PerfectMoney")?price=" + payCoin.toFixed(2);
        }
        else {
            $.ajax({
                beforeSend: function () {
                    $('#site-loader').show()
                },
                url: '@Url.Action("PayNow", "DepositPackage")',
                type: "post",
                data: { model: DepositsPay },
                success: function (data) {
                    if (data.status) {
                        location.href = "@Url.Action("Index","DepositOrder")";
                    }
                },
                complete: function () {
                    $('#site-loader').hide();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            })
        }
    }

    function GetPriceFromApi(paymentId) {
        $.ajax({
            beforeSend: function () {
                $('#site-loader').show()
            },
            url: '@Url.Action("GetPrice", "DepositPackage")',
            type: "post",
            data: { paymentId: paymentId, priceUSD: priceDefault },
            dataType: "json",
            success: function (data) {
                if (data !== undefined || data !== null) {
                    if (data.Status !== 0) {
                        DepositsPay.forEach((x) => {
                            x.PayCoin = data.lastPrice || data.last || 0;
                            x.PaymentMethodId = paymentId;
                            x.PaymentName = data.PaymentName;
                            x.sPrice = data.lastPrice || data.last || 0;
                            x.ScaleNumber = data.ScaleNumber;
                            x.tempPrice = data.tempPrice;
                        });
                    } else {
                        DepositsPay.forEach((x) => {
                            x.PayCoin = x.Price;
                            x.PaymentMethodId = paymentId;
                            x.PaymentName = data.PaymentName;
                            x.sPrice = x.sTempPrice;
                            x.ScaleNumber = 0;
                            x.tempPrice = x.sTempPrice
                        });
                    }
                    RenderDepositNow()
                }

            },
            complete: function () {
                $('#site-loader').hide()
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        })
    }
</script>